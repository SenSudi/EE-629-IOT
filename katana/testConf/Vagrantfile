# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.
  config.vm.box = "ubuntu/xenial64"

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  # config.vm.network "forwarded_port", guest: 80, host: 8080
  # config.vm.network "forwarded_port", guest: 8000, host: 8000

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  config.vm.provider "virtualbox" do |vb|
    vb.memory = "2048"
  end
  #
  # View the documentation for the provider you are using for more
  # information on available options.
  config.vm.provision "shell", inline: <<-SHELL
    set -eu

    sudo apt-get update
    # sudo apt-get -y upgrade

    # Get media folder from server
    rsync -azPh -e "ssh -i /vagrant/id_rsa -o StrictHostKeyChecking=no" katana@159.89.37.68:~/media /home/ubuntu/

    # Get database backup from server
    ssh -i /vagrant/id_rsa -o StrictHostKeyChecking=no katana@159.89.37.68 "pg_dump  --dbname=postgresql://postgres:misstransatlantian@localhost/djangopilot
     " >> /home/ubuntu/backup.sql

    sudo apt-get --assume-yes install postgresql postgresql-contrib postgresql-client python-pip python-dev nginx
    export LC_ALL=C
    sudo -H pip install --upgrade pip
    sudo -H pip install virtualenv virtualenvwrapper uwsgi

    cat << EOF | su - postgres -c psql
      CREATE DATABASE djangopilot OWNER postgres;
      ALTER USER postgres WITH PASSWORD 'misstransatlantian';
EOF

    echo "export WORKON_HOME=/home/ubuntu/venvs" >> /home/ubuntu/.bashrc
    echo "source /usr/local/bin/virtualenvwrapper.sh" >> /home/ubuntu/.bashrc

    source /home/ubuntu/.bashrc
SHELL
config.vm.provision "shell", inline: <<-SHELL
    export WORKON_HOME=/home/ubuntu/venvs
    source /usr/local/bin/virtualenvwrapper.sh
    mkvirtualenv katana

    sudo cp -r /vagrant /home/ubuntu/
    mv /home/ubuntu/vagrant /home/ubuntu/katana
    sudo cp -r /vagrant/testConf/_private_settings /home/ubuntu/katana/hv
    sudo cp -r /vagrant/testData/media /home/ubuntu/

    sudo -u postgres psql -U postgres djangopilot -f /home/ubuntu/backup.sql

    cd /home/ubuntu/katana
    pip install -r requirements.txt
    python manage.py migrate
    deactivate

    sudo mkdir -p /etc/uwsgi/sites/
    sudo cp /vagrant/testConf/katana.ini /etc/uwsgi/sites/
    sudo cp /vagrant/testConf/uwsgi.service /etc/systemd/system/
    sudo cp /vagrant/testConf/katana /etc/nginx/sites-available/
    cd /etc/nginx/sites-enabled
    sudo ln -s ../sites-available/katana
    sudo service nginx restart

    sudo systemctl start uwsgi
  SHELL
end
